{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/daltonchichester/Documents/GitHub/360MapController/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/daltonchichester/Documents/GitHub/360MapController/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/daltonchichester/Documents/GitHub/360MapController/src/PannellumReact.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Pannellum } from \"pannellum-react\";\nimport { Images } from \"./PanoConfigs/ProcessedPanoJSON.json\";\nimport CustomPannellumHotspot from \"./CustomPannellumHotspot\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PannellumReact = function PannellumReact(props) {\n  _s();\n\n  function loadLatLong() {\n    for (var i = 0; i < Images.length; i++) {\n      if (props.latLong[0] === Images[i].Latitude) {\n        if (props.latLong[1] === Images[i].Longitude) {\n          return Images[i].ImageId;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  var _useState = useState(loadLatLong()),\n      _useState2 = _slicedToArray(_useState, 2),\n      id = _useState2[0],\n      setId = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      yaw = _useState4[0],\n      setYaw = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      pitch = _useState6[0],\n      setPitch = _useState6[1];\n\n  function getJSONIndex() {\n    for (var i = 0; i < Images.length; i++) {\n      if (id === Images[i].ImageId) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  function handleClickHotspot(path, pitch, yaw) {\n    setYaw(yaw);\n    setPitch(pitch);\n    setId(path);\n  }\n\n  var hotspots = [];\n  var _Images$getJSONIndex = Images[getJSONIndex()],\n      ImageSrc = _Images$getJSONIndex.ImageSrc,\n      Hotspots = _Images$getJSONIndex.Hotspots;\n\n  if (Hotspots != null) {\n    var _iterator = _createForOfIteratorHelper(Hotspots),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var _step$value = _step.value,\n            Pitch = _step$value.Pitch,\n            Yaw = _step$value.Yaw,\n            Path = _step$value.Path;\n        hotspots.push(\n        /*#__PURE__*/\n\n        /*<Pannellum.Hotspot\n        type=\"custom\"\n        pitch={Pitch}\n        yaw={Yaw}\n        key={shortid.generate()}\n        handleClick={() => handleClickHotspot(Path, Pitch, Yaw)}\n        />*/\n        _jsxDEV(CustomPannellumHotspot, {\n          type: \"custom\",\n          pitch: Pitch,\n          yaw: Yaw,\n          handleClick: function handleClick() {\n            return handleClickHotspot(Path, Pitch, Yaw);\n          } //handleClick = {_.bind(handleClickHotspot, this)}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, _this));\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Pannellum, {\n    width: \"100%\",\n    height: \"100%\",\n    image: ImageSrc,\n    pitch: pitch,\n    yaw: yaw,\n    hfov: 110,\n    autoLoad: true,\n    onLoad: function onLoad() {\n      console.log(\"panorama loaded\");\n    },\n    children: hotspots\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(PannellumReact, \"N+bH5kglpRMzzse/KQXBkV+mTJQ=\");\n\n_c = PannellumReact;\nexport default PannellumReact;\n\nvar _c;\n\n$RefreshReg$(_c, \"PannellumReact\");","map":{"version":3,"sources":["/Users/daltonchichester/Documents/GitHub/360MapController/src/PannellumReact.jsx"],"names":["React","useState","Pannellum","Images","CustomPannellumHotspot","PannellumReact","props","loadLatLong","i","length","latLong","Latitude","Longitude","ImageId","id","setId","yaw","setYaw","pitch","setPitch","getJSONIndex","handleClickHotspot","path","hotspots","ImageSrc","Hotspots","Pitch","Yaw","Path","push","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Pannellum } from \"pannellum-react\";\nimport { Images } from \"./PanoConfigs/ProcessedPanoJSON.json\";\nimport CustomPannellumHotspot from \"./CustomPannellumHotspot\";\n\nconst PannellumReact = (props) => {\n  function loadLatLong() {\n    for (var i = 0; i < Images.length; i++) {\n      if (props.latLong[0] === Images[i].Latitude) {\n        if (props.latLong[1] === Images[i].Longitude) {\n          return Images[i].ImageId;\n        }\n      }\n    }\n    return null;\n  }\n\n  const [id, setId] = useState(loadLatLong());\n  const [yaw, setYaw] = useState(0);\n  const [pitch, setPitch] = useState(0);\n\n  function getJSONIndex() {\n    for (var i = 0; i < Images.length; i++) {\n      if (id === Images[i].ImageId) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  function handleClickHotspot(path, pitch, yaw) {\n    setYaw(yaw);\n    setPitch(pitch);\n    setId(path);\n  }\n\n  let hotspots = [];\n  const { ImageSrc, Hotspots } = Images[getJSONIndex()];\n\n  if (Hotspots != null) {\n    for (const { Pitch, Yaw, Path } of Hotspots) {\n      hotspots.push(\n        /*<Pannellum.Hotspot\n        type=\"custom\"\n        pitch={Pitch}\n        yaw={Yaw}\n        key={shortid.generate()}\n        handleClick={() => handleClickHotspot(Path, Pitch, Yaw)}\n        />*/\n\n        <CustomPannellumHotspot\n          type=\"custom\"\n          pitch={Pitch}\n          yaw={Yaw}\n          handleClick={() => handleClickHotspot(Path, Pitch, Yaw)}\n          //handleClick = {_.bind(handleClickHotspot, this)}\n        />\n      );\n    }\n  }\n\n  return (\n      <Pannellum\n        width=\"100%\"\n        height=\"100%\"\n        image={ImageSrc}\n        pitch={pitch}\n        yaw={yaw}\n        hfov={110}\n        autoLoad\n        onLoad={() => {\n          console.log(\"panorama loaded\");\n        }}\n      >\n        {hotspots}\n      </Pannellum>\n  );\n};\n\nexport default PannellumReact;\n"]},"metadata":{},"sourceType":"module"}