{"version":3,"sources":["Map.jsx","CustomPannellumHotspot.jsx","PannellumReact.jsx","PanoButton.js","App.js","reportWebVitals.js","index.js"],"names":["MapComp","props","useState","map","setMap","zoom","zoomLevel","latLong","markers","Images","Latitude","Longitude","push","CircleMarker","center","eventHandlers","click","toggleMap","getZoom","toString","MapContainer","className","scrollWheelZoom","whenCreated","style","height","width","TileLayer","attribution","url","spiderfyDistanceMultiplier","showCoverageOnHover","maxClusterRadius","CustomPannellumHotspot","Hotspot","type","pitch","yaw","path","handleClick","shortid","PannellumReact","i","length","ImageId","loadLatLong","id","setId","setYaw","setPitch","hotspots","getJSONIndex","ImageSrc","Hotspots","Pitch","Yaw","Path","handleClickHotspot","image","hfov","autoLoad","onLoad","console","log","ControllerButton","position","top","left","zIndex","onClick","MapPanoController","currentComponent","setCurrentComponent","setLatLong","setZoomLevel","switchComponent","Map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"spEAqDeA,EA7CC,SAACC,GACf,IADyB,EACzB,EAAsBC,mBAAS,MAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,mBAASD,EAAMI,MAAjD,mBAAOC,EAAP,KACA,GADA,KAC8BJ,mBAASD,EAAMM,UAA7C,mBAAOA,EAAP,KAEIC,GAFJ,KAEc,IALW,cAMaC,KANb,mCAMZC,EANY,EAMZA,SAAUC,EANE,EAMFA,UACrBH,EAAQI,KACN,cAACC,EAAA,EAAD,CAEEC,OAAQ,CAACJ,EAAUC,GACnBI,cAAe,CACbC,MAAO,WACLf,EAAMgB,UAAU,aAAc,CAACP,EAAUC,GAAYR,EAAIe,cAJxDR,EAASS,cAHpB,2BAA+C,IANtB,8BAoBzB,OACE,eAACC,EAAA,EAAD,CACEC,UAAU,oBACVP,OAAQP,EACRF,KAAMC,EACNgB,iBAAiB,EACjBC,YAAanB,EACboB,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QANlC,UAQE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,gFAGN,cAAC,IAAD,CACEC,2BAA4B,EAC5BC,qBAAqB,EACrBC,iBAAkB,GAHpB,SAKGxB,Q,gBC9BMyB,EAbgB,SAAChC,GAC9B,OACE,cAAC,IAAUiC,QAAX,CACEC,KAAMlC,EAAMkC,KACZC,MAAOnC,EAAMmC,MACbC,IAAKpC,EAAMoC,IACXC,KAAMrC,EAAMqC,KAEZC,YAAatC,EAAMsC,aADdC,eCoEIC,EA1EQ,SAACxC,GAYtB,MAAoBC,mBAXpB,WACE,IAAK,IAAIwC,EAAI,EAAGA,EAAIjC,IAAOkC,OAAQD,IACjC,GAAIzC,EAAMM,QAAQ,KAAOE,IAAOiC,GAAGhC,UAC7BT,EAAMM,QAAQ,KAAOE,IAAOiC,GAAG/B,UACjC,OAAOF,IAAOiC,GAAGE,QAIvB,OAAO,KAGoBC,IAA7B,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAAsB7C,mBAAS,GAA/B,mBAAOmC,EAAP,KAAYW,EAAZ,KACA,EAA0B9C,mBAAS,GAAnC,mBAAOkC,EAAP,KAAca,EAAd,KAiBA,IAAIC,EAAW,GACf,EAA+BzC,IAhB/B,WACE,IAAK,IAAIiC,EAAI,EAAGA,EAAIjC,IAAOkC,OAAQD,IACjC,GAAII,IAAOrC,IAAOiC,GAAGE,QACnB,OAAOF,EAGX,OAAO,KAU6BS,IAA9BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,GAAgB,MAAZA,EAAkB,CAAC,IAAD,gBACeA,GADf,mCACPC,EADO,EACPA,MAAOC,EADA,EACAA,IAAKC,EADL,EACKA,KACvBN,EAAStC,KASP,cAAC,EAAD,CACEuB,KAAK,SACLC,MAAOkB,EACPjB,IAAKkB,EACLhB,YAAa,kBAxBrB,SAA4BD,EAAMF,EAAOC,GACvCW,EAAOX,GACPY,EAASb,GACTW,EAAMT,GAqBmBmB,CAAmBD,EAAMF,EAAOC,QAdzD,2BAA8C,IAD1B,+BAsBtB,OACI,cAAC,IAAD,CACE7B,MAAM,OACND,OAAO,OACPiC,MAAON,EACPhB,MAAOA,EACPC,IAAKA,EACLsB,KAAM,IACNC,UAAQ,EACRC,OAAQ,WACNC,QAAQC,IAAI,oBAThB,SAYGb,KC3CMc,EA5BU,SAAC/D,GAKxB,OACE,sBAAKuB,MAAO,CACJC,OAAO,QADf,UAGE,qBACED,MAAO,CACLyC,SAAU,WACVC,IAAK,QACLC,KAAM,MACNC,OAAQ,KALZ,SAQE,wBAAQC,QAhBd,WACEpE,EAAMgB,UAAU,MAAOhB,EAAMM,QAASN,EAAMI,OAexC,mBAEA,qBAAKmB,MAAO,CACJC,OAAO,QADf,SAGC,cAAE,EAAF,CAAiBlB,QAASN,EAAMM,QAASF,KAAMJ,EAAMI,aCkB/CiE,EAvCW,WACxB,MAAgDpE,mBAAS,OAAzD,mBAAOqE,EAAP,KAAyBC,EAAzB,KACA,EAA8BtE,mBAAS,CAAC,EAAG,IAA3C,mBAAOK,EAAP,KAAgBkE,EAAhB,KACA,EAAkCvE,mBAAS,GAA3C,mBAAOI,EAAP,KAAkBoE,EAAlB,KAEA,SAASC,EAAgBJ,EAAkBhE,EAASD,GAClDmE,EAAWlE,GACXmE,EAAapE,GACbkE,EAAoBD,GAGtB,OACE,qBAAKlD,UAAU,iBAAiBG,MAAO,CAC/BC,OAAO,QACPC,MAAO,SAFf,SAIE,sBAAKL,UAAU,WAAWG,MAAO,CACzBC,OAAO,QACPC,MAAO,SAFf,UAIwB,QAArB6C,GACC,cAACK,EAAD,CACE3D,UAAW0D,EACXpE,QAASA,EACTF,KAAMC,IAGY,eAArBiE,GACC,cAAC,EAAD,CACEtD,UAAW0D,EACXpE,QAASA,EACTF,KAAMC,UCvBHuE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.46537ec6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { MapContainer, TileLayer, Marker, CircleMarker } from \"react-leaflet\";\nimport { Images } from \"./PanoConfigs/ProcessedPanoJSON.json\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-leaflet-markercluster/dist/styles.min.css\";\n\nconst MapComp = (props) => {\n  const [map, setMap] = useState(null);\n  const [zoomLevel, setZoomLevel] = useState(props.zoom);\n  const [latLong, setlatLong] = useState(props.latLong);\n\n  let markers = [];\n  for (const { Latitude, Longitude } of Images) {\n    markers.push(\n      <CircleMarker\n        key={Latitude.toString()}\n        center={[Latitude, Longitude]}\n        eventHandlers={{\n          click: () => {\n            props.toggleMap(\"PanoViewer\", [Latitude, Longitude], map.getZoom());\n          },\n        }}\n      ></CircleMarker>\n    );\n  }\n\n  return (\n    <MapContainer\n      className=\"markercluster-map\"\n      center={latLong}\n      zoom={zoomLevel}\n      scrollWheelZoom={true}\n      whenCreated={setMap}\n      style={{ height: \"100%\", width: \"100%\" }}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\n      />\n\n      <MarkerClusterGroup\n        spiderfyDistanceMultiplier={1}\n        showCoverageOnHover={false}\n        maxClusterRadius={20}\n      >\n        {markers}\n      </MarkerClusterGroup>\n    </MapContainer>\n  );\n};\n\nexport default MapComp;\n","import React from \"react\";\nimport { Pannellum } from \"pannellum-react\";\nimport * as shortid from \"shortid\";\n\nconst CustomPannellumHotspot = (props) => {\n  return (\n    <Pannellum.Hotspot\n      type={props.type}\n      pitch={props.pitch}\n      yaw={props.yaw}\n      path={props.path}\n      key={shortid.generate()}\n      handleClick={props.handleClick}\n    />\n  );\n};\n\nexport default CustomPannellumHotspot;\n","import React, { useState } from \"react\";\nimport { Pannellum } from \"pannellum-react\";\nimport { Images } from \"./PanoConfigs/ProcessedPanoJSON.json\";\nimport CustomPannellumHotspot from \"./CustomPannellumHotspot\";\n\nconst PannellumReact = (props) => {\n  function loadLatLong() {\n    for (var i = 0; i < Images.length; i++) {\n      if (props.latLong[0] === Images[i].Latitude) {\n        if (props.latLong[1] === Images[i].Longitude) {\n          return Images[i].ImageId;\n        }\n      }\n    }\n    return null;\n  }\n\n  const [id, setId] = useState(loadLatLong());\n  const [yaw, setYaw] = useState(0);\n  const [pitch, setPitch] = useState(0);\n\n  function getJSONIndex() {\n    for (var i = 0; i < Images.length; i++) {\n      if (id === Images[i].ImageId) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  function handleClickHotspot(path, pitch, yaw) {\n    setYaw(yaw);\n    setPitch(pitch);\n    setId(path);\n  }\n\n  let hotspots = [];\n  const { ImageSrc, Hotspots } = Images[getJSONIndex()];\n\n  if (Hotspots != null) {\n    for (const { Pitch, Yaw, Path } of Hotspots) {\n      hotspots.push(\n        /*<Pannellum.Hotspot\n        type=\"custom\"\n        pitch={Pitch}\n        yaw={Yaw}\n        key={shortid.generate()}\n        handleClick={() => handleClickHotspot(Path, Pitch, Yaw)}\n        />*/\n\n        <CustomPannellumHotspot\n          type=\"custom\"\n          pitch={Pitch}\n          yaw={Yaw}\n          handleClick={() => handleClickHotspot(Path, Pitch, Yaw)}\n          //handleClick = {_.bind(handleClickHotspot, this)}\n        />\n      );\n    }\n  }\n\n  return (\n      <Pannellum\n        width=\"100%\"\n        height=\"100%\"\n        image={ImageSrc}\n        pitch={pitch}\n        yaw={yaw}\n        hfov={110}\n        autoLoad\n        onLoad={() => {\n          console.log(\"panorama loaded\");\n        }}\n      >\n        {hotspots}\n      </Pannellum>\n  );\n};\n\nexport default PannellumReact;\n","import React from \"react\";\nimport PannellumReact from \"./PannellumReact.jsx\";\n\nconst ControllerButton = (props) => {\n  function handleClick() {\n    props.toggleMap(\"Map\", props.latLong, props.zoom);\n  }\n\n  return (\n    <div style={{\n            height:\"100%\"\n                }}>\n      <div\n        style={{\n          position: \"relative\",\n          top: \"150px\",\n          left: \"5px\",\n          zIndex: \"1\",\n        }}\n      >\n        <button onClick={handleClick}>Map</button>\n      </div>\n        <div style={{\n                height:\"100%\"\n                }}>\n         < PannellumReact latLong={props.latLong} zoom={props.zoom} />\n      </div>\n    </div>\n  );\n};\n\nexport default ControllerButton;\n","import React, { useState } from \"react\";\nimport MapComp from \"./Map.jsx\";\nimport ControllerButton from \"./PanoButton.js\";\n\nconst MapPanoController = () => {\n  const [currentComponent, setCurrentComponent] = useState(\"Map\");\n  const [latLong, setLatLong] = useState([0, 0]);\n  const [zoomLevel, setZoomLevel] = useState(3);\n\n  function switchComponent(currentComponent, latLong, zoomLevel) {\n    setLatLong(latLong);\n    setZoomLevel(zoomLevel);\n    setCurrentComponent(currentComponent);\n  }\n\n  return (\n    <div className=\"pano-container\" style={{\n            height:\"100vh\",\n            width: \"100vw\"\n                }}>\n      <div className=\"pano-map\" style={{\n              height:\"100vh\",\n              width: \"100vw\"\n                }}>\n        {currentComponent === \"Map\" && (\n          <MapComp\n            toggleMap={switchComponent}\n            latLong={latLong}\n            zoom={zoomLevel}\n          />\n        )}\n        {currentComponent === \"PanoViewer\" && (\n          <ControllerButton\n            toggleMap={switchComponent}\n            latLong={latLong}\n            zoom={zoomLevel}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MapPanoController;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}